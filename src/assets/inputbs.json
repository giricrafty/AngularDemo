{
    "input":
    {
        "html":"<input #box matInput value=''/>",
        "bootstraphtml":"<input #box  class='form-control' value=''/>",
        "import":"import {MatInputModule} from '@angular/material/input';",
        "tag":"input",
        "bootstraptag":"input",
        "event":
        {           
            "keyup": "(keyup)='onKey(box.value)'",
            "keyupenter": "(keyup.enter)='onKeyEnter(box.value)'",
            "blur": "(blur)='onBlur(box.value)'",
            "change": "(change)='onChange(box.value)'",
            "keypress": "(keypress)='restrictNumeric($event)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled",
            "placeholder": "Please enter the value",
            "number":"type='text'",
            "maxlength":"maxlength='9'",
            "minlength":"minlength='3'",
            "email":"pattern='[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$'"
        },
        "unittest":
        {
            "keyup": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled(); }) })",

            "keyupenter": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKeyEnter'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyupenter();  tick(); expect(component.onKeyEnter).toHaveBeenCalled(); }) })",

            "blur": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onBlur'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.blur(); tick(); expect(component.onBlur).toHaveBeenCalled(); }) })",

            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })",

            "keypress": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKeyPress'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyupress();  tick(); expect(component.onKeyPress).toHaveBeenCalled(); }) })"

        },
        "ts":
        {
            "keyup":"onKey(boxvalue:string){console.log('onKey = ' + boxvalue);}",
            "keyupenter":"onKeyEnter(boxvalue:string){console.log('onKeyEnter = ' +boxvalue);}",
            "blur":"onBlur(boxvalue:string){console.log('onBlur = ' +boxvalue);}",
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}",
            "keypress": "restrictNumeric(e){var data; var regex=/[\\d\\s]/;if(e.metaKey || e.ctrlKey){return true;} if(e.which === 0){return true;} if(e.which<33){return true;}data=String.fromCharCode(e.which);return e.target.value.length < 8!! && regex.test(data);}"
        }
    },
    "slider":
    {
        "html":"<mat-slider [disabled]='disabled' [invert]='invert' [max]='max' [min]='min' [step]='step' [thumbLabel]='thumbLabel' [(ngModel)]='value' [vertical]='vertical' aria-labelledby='example-name-label'> </mat-slider>",
        "bootstraphtml":"<input type='range' #range [disabled]='disabled' [max]='max' [min]='min' [step]='step' [(ngModel)]='value'/>",
        "tag":"mat-slider",
        "import":"import { MatSliderModule } from '@angular/material/slider';",
        "bootstraptag":"input",
        "event":
        {
            "tickInterval": "[tickInterval]='getSliderTickInterval()'"           
        },
        "validation":
        {
            "required": "required",
            "checked": "checked",
            "disabled": "disabled"
        },
        "unittest":
        {
            "tickInterval": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "basic":"autoTicks = false;disabled = false;invert = false;max = 100;min = 0;showTicks = false;step = 1;thumbLabel = false;value = 0;vertical = false;tickInterval = 1;",
            "tickInterval":"getSliderTickInterval(): number | 'auto' {if (this.showTicks) {return this.autoTicks ? 'auto' : this.tickInterval;}return 0;}"
        }
    },
    "slidetoggle":
    {
        "html":"<mat-slide-toggle>Slide!</mat-slide-toggle>",
        "bootstraphtml":"<div class='o-switch btn-group' data-toggle='buttons' role='group'><label class='btn btn-secondary active'><input type='radio' name='options' id='option1' autocomplete='off' checked> 1</label><label class='btn btn-secondary'><input type='radio' name='options' id='option2' autocomplete='off'>2</label><label class='btn btn-secondary'><input type='radio' name='options' id='option3' autocomplete='off'>3</label></div>",
        "tag":"mat-slide-toggle",
        "import":"import {MatSlideToggleModule} from '@angular/material/slide-toggle';",
        "bootstraptag":"div",
        "event":
        {          
            "input": "onInputChange($event)"
        },
        "validation":
        {
            "checked": "checked",
            "disabled": "disabled"
        },
        "unittest":
        {
            "input": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "input":"onInputChange(event: MatSliderChange) {console.log(event.value);}"
        }
    }, 
    "table":
    {                
        "html":"<table mat-table matSort [dataSource]='dataSource' class='mat-elevation-z8'>",
        "column":"<ng-container matColumnDef='columnName'><th mat-header-cell *matHeaderCellDef>ColumnName</th><td mat-cell *matCellDef='let element'>",
        "MaterialClosetag":"<tr mat-header-row *matHeaderRowDef='displayedColumns'></tr><tr mat-row *matRowDef='let row; columns: displayedColumns;'></tr></table> ",
        "bootstraphtml":"<table class='table table-bordered'>",
        "tag":"table",
        "bootstraptag":"table",
        "tscode":"displayedColumns: string[] = ['column1','column2','column3'];dataSource=['row1']",
        "import":"import {MatTableModule} from '@angular/material/table';",
        "event":
        {          
            "sort": "matSort",
            "singleclick": "(click)='singleClick(row)'"
        },
        "validation":
        {
            "checked": "checked",
            "disabled": "disabled"
        },
        "unittest":
        {
            "input": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onKey'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.keyup();  tick(); expect(component.onKey).toHaveBeenCalled();)"
        },
        "ts":
        {
            "singleclick": "singleClick(row) { console.log(row);}",
            "input":"onInputChange(event: MatSliderChange) {console.log(event.value);}"
        }
    },
    "datepicker":
    {
        "html":"<mat-form-field appearance='fill'><mat-label>Choose a date</mat-label><input matInput [matDatepicker]='picker'><mat-datepicker-toggle matSuffix [for]='picker'></mat-datepicker-toggle><mat-datepicker #picker></mat-datepicker></mat-form-field>",
        "bootstraphtml":"<form class='form-inline'> <div class='form-group'><div class='input-group'> <input class='form-control' placeholder='yyyy-mm-dd' name='dp'  ngbDatepicker #d='ngbDatepicker'> <div class='input-group-append'> <button class='btn btn-outline-secondary calendar' (click)='d.toggle()' type='button'></button>",
        "tag":"mat-form-field",
        "bootstraptag":"form",
        "event":
        {          
            "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest":
        {
            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('mat-form-field')); input.nativeElement.change();  tick(); expect(component.onChange).toHaveBeenCalled();)"
        },
        "ts":
        {
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        }
    },
    "dialog":
    {
        "html":"<button mat-raised-button'>Pick one</button>",
        "bootstraphtml":"<button type='button' class='btn btn-info btn-lg' (click)='openModal()'>Click to Open</button><div class='modal' tabindex='-1' role='dialog'  [ngStyle]='{​​​​​​​​display:display}​​​​​​​​'><div class='modal-dialog' role='document'><div class='modal-content'><div class='modal-header'><h4 class='modal-title'>Model Title</h4><button type='button' class='close' aria-label='Close' (click)='onCloseHandled()'><span aria-hidden='true'>&times;</span></button></div><div class='modal-body'><p>Model body text</p></div><div class='modal-footer'><button type='button' class='btn btn-default' (click)='onCloseHandled()' >Close</button></div></div></div></div>",
        "tag":"button",
        "bootstraptag":"button",
        "event":
        {          
            "click": "(click)='openDialog()'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest":
        {
            "click": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'openDialog'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('button')); input.nativeElement.click();  tick(); expect(component.openDialog).toHaveBeenCalled();)"
        },
        "ts":
        {
            "click":"let dialogRef = dialog.open(AppComponent, { height: '400px',width: '600px',});dialogRef.afterClosed().subscribe(result => {console.log('Dialog result:' result);});dialogRef.close('');"
           
        }
    },
    "progressbar":
    {
        "html":"<mat-progress-bar></mat-progress-bar>",
        "bootstraphtml":"<div class='progress'><div class='progress-bar' role='progress-bar' style='width: 25%' aria-valuenow='25' aria-valuemin='0' aria-valuemax='100'>25%</div></div>",
        "tag":"mat-progress-bar",
        "import":"import {MatProgressBarModule} from '@angular/material/progress-bar';",
        "bootstraptag":"div",
        "event":
        {          
            "determinate": "mode='determinate' value='40'",
            "indeterminate": "mode='indeterminate'",
            "buffer": "mode='buffer'",
            "query": "mode='query'"
        },
        "validation":
        {
            "none": ""
        },
        "unittest":
        {
            "determinate": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const progressElement = fixture.debugElement.query(By.css('mat-progress-bar'))!; const progressComponent = progressElement.componentInstance; expect(progressComponent.value).toBe(40); expect(progressComponent.mode).toBe('determinate');",
            "indeterminate": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const progressElement = fixture.debugElement.query(By.css('mat-progress-bar'))!; const progressComponent = progressElement.componentInstance;  expect(progressComponent.mode).toBe('indeterminate');",
            "buffer": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const progressElement = fixture.debugElement.query(By.css('mat-progress-bar'))!; const progressComponent = progressElement.componentInstance;  expect(progressComponent.mode).toBe('buffer');",
            "query": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const progressElement = fixture.debugElement.query(By.css('mat-progress-bar'))!; const progressComponent = progressElement.componentInstance;  expect(progressComponent.mode).toBe('query');"
        },
        "ts":
        {
            "determinate":"",
            "indeterminate":"",
            "buffer":""
        }
    },
    "select": {
        "html": "<mat-form-field appearance='fill'><mat-label>Gender</mat-label><mat-select><mat-option>Male</mat-option><mat-option>Female</mat-option></mat-select></mat-form-field>",
        "bootstraphtml":"<select id='selectid' class='form-select' [multiple]='multiple' [arialabel]='arialabel'><option value=''></option></select>",
        "tag":"mat-form-field",
        "import":"import {MatSelectModule} from '@angular/material/select';",
        "bootstraptag":"select",
        "event": {
            "change": "(change)='onChangeSelect($event.target.value)'"
        },
        "validation": {
            "required": "required"
        },
        "ts":
        {
            "change":"onChangeSelect(selectedValue: string){console.log('onChange = ' +selectedValue);}"
        },
        "unittest": {
            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChangeSelect'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('select')); input.nativeElement.change(); tick(); expect(component.onChangeSelect).toHaveBeenCalled(); }) })"
        }
    },
    "button": {
        "html": "<mat-button color='primary' outline='true'>Primary Button</mat-button>",
        "bootstraphtml":"<button class='btn btn-primary'>Primary Button</button>",
        "tag":"mat-button",
        "import":"import {MatButtonModule} from '@angular/material/button';",
        "bootstraptag":"button",
        "event": {
            "click": "(click)='eventClick('form values')'"
        },
        "validation": {
            "disabled": "disabled"
        },
        "unittest": {
            "click": "it('should be button identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'eventClick'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('mat-button')); input.nativeElement.click(); tick(); expect(component.eventClick).toHaveBeenCalled(); }) })"
        },
        "ts": {
            "click": "eventClick(getForm: string) {console.log(getForm);}"
        }
    },
    "buttontoggle": {
        "html": " <mat-button-toggle-group name='fontStyle' aria-label='Font Style'><mat-button-toggle value='bold'>Bold</mat-button-toggle><mat-button-toggle value='italic'>Italic</mat-button-toggle><mat-button-toggle value='underline'>Underline</mat-button-toggle></mat-button-toggle-group>",
        "bootstraphtml":"<div class='btn-group' role='group'> <button type='button' class='btn btn-secondary'>Left</button> <button type='button' class='btn btn-secondary'>Middle</button><button type='button' class='btn btn-secondary'>Right</button></div>",
        "tag":"mat-button-toggle-group",
        "import":"import {MatButtonToggleModule} from '@angular/material/button-toggle';",
        "bootstraptag":"button",
        "event": {
            "change": "(change)='onChange($event.target.value)'"
        },
        "validation": {
            "disabled": "disabled"
        },
        "ts": {
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
            },
        "unittest": {
            "change": "it('should be button toggle identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('mat-button-toggle-group')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        }
    },
    "checkbox":{
        "html":" <mat-checkbox>Check me!</mat-checkbox>",
        "tag":"mat-checkbox",
        "bootstraphtml":"<input #box value='' type='checkbox' [checked]='checked'/>",
        "bootstraptag":"input",
        "import":"import {MatCheckboxModule} from '@angular/material/checkbox';",
        "event": {
        "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "ts": {
        "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        },
        "unittest": {
        "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        }
    },
    "radio":{
        "html":"<input #box matInput value='' type='radio'/>",
        "bootstraphtml":"<input #box value='' type='radio' [checked]='checked'/>",
        "tag":"input",
        "bootstraptag":"input",
        "import":"import {MatRadioModule} from '@angular/material/radio';",
        "event": {
            "change": "(change)='onChange(box.value)'"
        },
        "validation":
        {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest": {
            "change": "it('should be input identification', () => { const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => { spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }) })"
        },
        "ts": {
            "change":"onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        }
    },
    "textarea": {
        "html":"<textarea type='text' id='form7' class='md-textarea form-control' mdbInput></textarea><label for='form7'>Basic textarea</label>",
        "bootstraphtml": "<textarea class='form-control' id='exampleTextarea'></textarea>",
        "tag": "textarea",
        "bootstraptag":"textarea",
        "event": {
            "keyup": "(keyup)='onKey(box.value)'",
            "keyupenter": "(keyup.enter)='onKeyEnter(box.value)'",
            "blur": "(blur)='onBlur(box.value)'",
            "change": "(ngModelChange)='onChange($event)'",
            "keypress": "(keypress)='restrictNumeric($event)'"
        },
        "validation": {
            "required": "required",
            "disabled": "disabled",
            "placeholder": "Please enter the value",
            "number":"type='text'",
            "maxlength":"maxlength='9'",
            "minlength":"minlength='3'",
            "email":"pattern='[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$'"
        },
        "unittest": {
            "change": "it('should be input identification', () => {const fixture = TestBed.createComponent(AppComponent); const component = fixture.componentInstance;  fakeAsync(() => {​​​​​​​​ spyOn(component, 'onChange'); fixture.detectChanges();  const input = fixture.debugElement.query(By.css('input')); input.nativeElement.change(); tick(); expect(component.onChange).toHaveBeenCalled(); }​​​​​​​​) }​​​​​​​​)"
        },
        "ts": {
            "change": "onChange(boxvalue:string){console.log('onChange = ' +boxvalue);}"
        }
    },
    "list": {
        "html":"<mat-list><mat-list-item>Item 1</mat-list-item><mat-list-item>Item 2</mat-list-item><mat-list-item>Item 3</mat-list-item></mat-list>",
        "tag":"mat-list",
        "import":"import { MatListModule } from '@angular/material/list';",
        "bootstraphtml": "<ul><li>Item 1</li><li>Item 2</li></ul>",
        "bootstraptag": "ul",
        "event": {
            "none":""
        },
        "validation": {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest": {

        },
        "ts": {}
    },
    "menu": {
        "html":"<button mat-button [matMenuTriggerFor]='menu'>Menu</button><mat-menu #menu='matMenu'><button mat-menu-item>Menu Item 1</button><button mat-menu-item>Menu Item 2</button></mat-menu>",
        "tag":"mat-menu",
        "import":"import {MatMenuModule} from  '@angular/material/menu';",
        "bootstraphtml": "<nav class='navbar navbar-expand-lg navbar-dark bg-dark'><div class='collapse navbar-collapse'><div class='navbar-nav'><a class='nav-item nav-link active'>Home</a><a class='nav-item nav-link active'>About Us</a><a class='nav-item nav-link active'>Contact Us</a></div></div></nav>",
        "bootstraptag": "nav",
        "event": {
            "none": ""
        },
        "validation": {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest": {
            "none": ""
        },
        "ts": {
            "none": ""
        }
    },
    "tabs": {
        "html":"<mat-tab-group><mat-tab label='First'> Content 1 </mat-tab><mat-tab label='Second'> Content 2 </mat-tab><mat-tab label='Third'> Content 3 </mat-tab></mat-tab-group>",
        "tag":"mat-tab-group",
        "import":"import {MatTabsModule} from '@angular/material/tabs';",
        "bootstraphtml": "<ul class='nav nav-tabs'><li class='nav-item'><a class='nav-link active' aria-current='page' href='#'>Active</a></li><li class='nav-item'><a class='nav-link' href='#'>Link</a></li><li class='nav-item'><a class='nav-link' href='#'>Link</a></li><li class='nav-item'><a class='nav-link disabled' href='#' tabindex='-1' aria-disabled='true'>Disabled</a></li></ul>",
        "bootstraptag": "ul",
        "event": {},
        "validation": {
            "none": ""
        },
        "unittest": {},
        "ts": {
            "none": ""
        }
    },
    "grid-list": {
        "html":"<mat-grid-list cols='2' rowHeight='4:1'><mat-grid-tile>1</mat-grid-tile><mat-grid-tile>2</mat-grid-tile><mat-grid-tile>3</mat-grid-tile><mat-grid-tile>4</mat-grid-tile></mat-grid-list>",
        "tag":"mat-grid-list",
        "css":"mat-grid-tile {background: lightblue;}",
        "import":"import {MatGridListModule} from '@angular/material/grid-list';",
        "bootstraphtml": "<div class='container my-container'><div class='row my-row'><div class='col-md-4 my-col'>Row 1 Col 1</div><div class='col-md-8 my-col'>Row 1 Col 2</div></div><div class='row my-row'><div class='col my-col'>Row 2 Col 1</div></div></div>",
        "bootstraptag": "div",
        "bootstrapcss":".my-container{border:1px solid green;}.my-row{border:3px solid red;height: 60px;}.my-col{border:3px dotted blue;}",
        "event": {
            "none":""
        },
        "validation": {
            "none":""
        },
        "unittest": {
            "none":""
        },
        "ts": {
            "none":""
        }
        
        
    },
    "expansion-panel": {
        "html":"<mat-accordion><mat-expansion-panel hideToggle><mat-expansion-panel-header><mat-panel-title>This is the expansion title</mat-panel-title><mat-panel-description>This is a summary of the content</mat-panel-description></mat-expansion-panel-header><p>This is the primary content of the panel.</p></mat-expansion-panel><mat-expansion-panel (opened)='panelOpenState = true' (closed)='panelOpenState = false'><mat-expansion-panel-header><mat-panel-title>Self aware panel</mat-panel-title><mat-panel-description>Currently I am {{panelOpenState ? 'open' : 'closed'}}</mat-panel-description></mat-expansion-panel-header><p>I'm visible because I am open</p></mat-expansion-panel></mat-accordion>",
        "tag":"mat-expansion-panel",
        "import":"import {MatExpansionModule} from '@angular/material/expansion';",
        "bootstraphtml": "<button type='button' data-toggle='collapse' data-target='#demo'>Click Here</button><div id='demo' class='collapse'>Your collapse code goes here</div>",
        "bootstraptag": "button",
        "tscode":"panelOpenState = false;",
        "event": {
            "none": ""
        },
        "validation": {
            "none": ""
        },
        "unittest": {
            "none": ""
        },
        "ts": { "":""
        }
    },
    "toolbar": {
        "html": "<mat-toolbar><button mat-icon-button class='example-icon' aria-label='Example icon-button with menu icon'><mat-icon>menu</mat-icon></button><span>My App</span><span class='example-spacer'></span><button mat-icon-button class='example-icon favorite-icon' aria-label='Example icon-button with heart icon'><mat-icon>favorite</mat-icon></button><button mat-icon-button class='example-icon' aria-label='Example icon-button with share icon'><mat-icon>share</mat-icon></button></mat-toolbar>",
        "tag": "mat-toolbar",
        "import":"import {MatToolbarModule} from '@angular/material/toolbar';",
        "bootstraphtml":"",
        "bootstraptag":"",
        "event": {
            "none":""
        },
        "validation": {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest": {},
        "ts": {}
    },
    "sidenav": {
        "html": "<mat-sidenav-container><mat-sidenav #sidenav='matSidenav' class='mat-elevation-z8'><button mat-button class='menu-button'><mat-icon>home</mat-icon><span>Home</span></button><button mat-button class='menu-button'><mat-icon>person</mat-icon><span>Profile</span></button><button mat-button class='menu-button'><mat-icon>info</mat-icon><span>About</span></button><mat-divider></mat-divider><button mat-button class='menu-button'><mat-icon>help</mat-icon><span>Help</span></button></mat-sidenav><mat-sidenav-content><div class='content mat-elevation-z8'>Main content here!</div></mat-sidenav-content></mat-sidenav-container>",        
        "bootstraphtml":"<div class='sidenav'><a href='#'>About</a><a href='#''>Services</a><a href='#''>Clients</a><a href='#''>Contact</a></div>",
        "tag": "mat-sidenav",
        "bootstraptag":"div",
        "import":"import {MatSidenavModule} from '@angular/material/sidenav';",
        "css":"mat-sidenav { margin: 16px;width: 200px; border-right: none; background: #002b5c;color: white;border-radius: 10px;padding: 16px;text-align: center;}.content {height: calc(100vh - 98px);border-radius: 10px;margin: 16px;margin-left: 32px;display: flex;justify-content: center;align-items: center;font-size: 2rem;color: lightgray;}.menu-button {width: 100%;display: flex;align-items: center;justify-content: flex-start;font-size: 1rem;mat-icon {margin-right: 8px;}}.name {margin-top: 8px;font-weight: normal;}.designation { margin-top: 2px; font-size: 0.7rem; color: lightgrey;}mat-divider {margin-top: 16px;margin-bottom: 16px;background-color: rgba(255, 255, 255, 0.5);}mat-sidenav-container { height: calc(100vh - 65px);}",
        "tscode":" @ViewChild(MatSidenav)sidenav!: MatSidenav;ngAfterViewInit(){this.observer.observe(['(max-width: 800px)']).subscribe((res) => {if (res.matches) {this.sidenav.mode = 'over';this.sidenav.close();} else {this.sidenav.mode = 'side';this.sidenav.open();}});}",
        "event": {
            "none":""
        },
        "validation": {
            "required": "required",
            "disabled": "disabled"
        },
        "unittest": {},
        "ts": {}
    }
}
